generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id               Int                         @id @default(autoincrement())
  discordProfile   DiscordProfile              @relation(fields: [discordProfileId], references: [id])
  discordProfileId Int                         @unique
  socialProfiles   UserSocialProviderProfile[]
  subscriptions    Subscription[]
}

model DiscordProfile {
  id           Int    @id @default(autoincrement())
  discordId    String @unique
  tokenDetails String
  user         User?
}

enum SocialProvider {
  VKONTAKTE
}

model UserSocialProviderProfile {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  provider     SocialProvider
  providerId   Int
  tokenDetails String

  userId Int

  @@unique([userId, provider])
  @@unique([providerId, provider])
}

model Guild {
  id       String    @id
  joinedOn DateTime  @default(now())
  channels Channel[]
}

model Channel {
  id            String         @id
  guild         Guild          @relation(fields: [guildId], references: [id])
  guildId       String
  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(uuid())
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  wall      Wall     @relation(fields: [wallId], references: [id])
  wallId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Wall {
  id             String         @id @default(uuid())
  providerWallId Int
  provider       SocialProvider
  subscriptions  Subscription[]
  posts          Post[]

  @@unique([providerWallId, provider])
}

model Post {
  id             String @id @default(uuid())
  providerPostId String
  wall           Wall   @relation(fields: [wallId], references: [id])
  wallId         String
}
